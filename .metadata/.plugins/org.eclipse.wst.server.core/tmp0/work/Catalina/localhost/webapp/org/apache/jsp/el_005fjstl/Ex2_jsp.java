/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.20
 * Generated at: 2021-09-29 02:38:42 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.el_005fjstl;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import dto.UserInfo;

public final class Ex2_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("dto.UserInfo");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write(" \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("\r\n");
      out.write("\t<meta charset=\"utf-8\">\r\n");
      out.write("\t<title>EL(Expression Language)</title>\r\n");
      out.write("\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("body{\r\n");
      out.write("\tfont-size: small;\r\n");
      out.write("}\r\n");
      out.write("table{\r\n");
      out.write("\tborder: thin solid gray;\r\n");
      out.write("\tborder-collapse: collapse;\r\n");
      out.write("}\r\n");
      out.write("td, th{\r\n");
      out.write("\tborder: thin dotted gray;\r\n");
      out.write("\tpadding: 10px;\r\n");
      out.write("}\r\n");
      out.write("th{\r\n");
      out.write("\tbackground-color: lightgray;\r\n");
      out.write("}\r\n");
      out.write("pre{\r\n");
      out.write("\tfont-size: 90%;\r\n");
      out.write("}\r\n");
      out.write("</style>\t\r\n");
      out.write("\t\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("<h2>EL - 값 꺼내기</h2>\r\n");
	// 데이터 준비
	pageContext.setAttribute("scores", new int[]{90,80,70,100});
	List<String> nameList = new LinkedList<String>();
	nameList.add("홍길동");
	nameList.add("임꺽정");
	nameList.add("일지매");
	pageContext.setAttribute("nameList",nameList);
	Map<String,String> map = new HashMap<String,String>();
	map.put("s01", "홍길동");
	map.put("s02", "임꺽정");
	map.put("s03", "일지매");
	pageContext.setAttribute("map", map);
	pageContext.setAttribute("userinfo", new UserInfo()
			.setId("abc").setPw("123").setName("홍길동"));

      out.write("\r\n");
      out.write("<table>\r\n");
      out.write("\t<tr><th>대상</th><th>EL 코드</th><th>설명</th></tr>\r\n");
      out.write("\t<tr>\r\n");
      out.write("\t<td>배열</td><td>${myArray[2]}</td><td>배열에서 해당 인덱스의 값을 꺼낸다.<br>\r\n");
      out.write("\t<pre>\r\n");
      out.write("\t[자바코드]\r\n");
      out.write("\tpageContext.setAttribute(\"scores\", new int[]{90,80,70,100});\r\n");
      out.write("\t\r\n");
      out.write("\t[실행 결과]\r\n");
      out.write("\t${scores[2]} = ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${scores[2]}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t[JSTL]\r\n");
      out.write("\t");
 int[] scoreList = (int[])pageContext.getAttribute("scores"); 
      out.print( "scores[2] = " + scoreList[2] );
      out.write("\r\n");
      out.write("\t</pre>\r\n");
      out.write("\t</td></tr>\r\n");
      out.write("\t\r\n");
      out.write("\t<tr><td>리스트</td><td>${myList[1]}</td><td>List 객체에서 인덱스로 지정된 항목의 값을 꺼낸다.<br>\r\n");
      out.write("\t<pre>\r\n");
      out.write("\t[자바코드]\r\n");
      out.write("\tList<String> nameList = new LinkedList<String>();\r\n");
      out.write("\tnameList.add(\"홍길동\");\r\n");
      out.write("\tnameList.add(\"임꺽정\");\r\n");
      out.write("\tnameList.add(\"일지매\");\r\n");
      out.write("\tpageContext.setAttribute(\"nameList\",nameList);\r\n");
      out.write("\t\r\n");
      out.write("\t[실행 결과]\r\n");
      out.write("\t${nameList[1]} = ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${nameList[1]}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\t</pre>\r\n");
      out.write("\t</td></tr>\r\n");
      out.write("\t\r\n");
      out.write("\t<tr><td>맵</td><td>${myMap.keyName}</td><td>Map 객체에서 키에 해당하는 값을 꺼낸다.<br>\r\n");
      out.write("\t<pre>\r\n");
      out.write("\t[자바코드]\r\n");
      out.write("\tMap<String,String> map = new HashMap<String,String>();\r\n");
      out.write("\tmap.put(\"s01\", \"홍길동\");\r\n");
      out.write("\tmap.put(\"s02\", \"임꺽정\");\r\n");
      out.write("\tmap.put(\"s03\", \"일지매\");\r\n");
      out.write("\tpageContext.setAttribute(\"map\", map);\r\n");
      out.write("\t\r\n");
      out.write("\t[실행 결과]\r\n");
      out.write("\t${map.s02} = ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${map.s02}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\t</pre>\r\n");
      out.write("\t</td></tr>\r\n");
      out.write("\t\r\n");
      out.write("\t<tr><td>빈Bean</td><td>${myObj.propName}</td><td>자바 객체에서 프로퍼티의 값을 꺼낸다.(getter 메서드를 호출한다)<br>\r\n");
      out.write("\t<pre>\r\n");
      out.write("\t[자바코드]\r\n");
      out.write("\tpageContext.setAttribute(\"userinfo\", new UserInfo()\r\n");
      out.write("\t\t\t.setId(\"abc\").setPw(\"123\").setName(\"홍길동\"));\r\n");
      out.write("\t\r\n");
      out.write("\t[실행 결과]\r\n");
      out.write("\t${userinfo.getId()} = ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${userinfo.getId()}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\t</pre>\r\n");
      out.write("\t</td></tr>\r\n");
      out.write("</table>\r\n");
      out.write("\r\n");
      out.write("<p><a href=\"Ex1.jsp\">[이전]</a><a href=\"Ex3.jsp\">[다음]</a></p>\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
